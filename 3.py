# -*- coding: utf-8 -*-
"""3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Q1cZm-AENO2J2xAi4i4z8_DMg8DWtKe
"""

# initialize the number of epochs to train for and batch size
EPOCHS = 15
BATCH_SIZE = 5
VISUALIZE_SAMPLES = 10

# import the necessary packages
from tensorflow.keras.layers import BatchNormalization
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import Conv2DTranspose
from tensorflow.keras.layers import LeakyReLU
from tensorflow.keras.layers import Activation
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Reshape
from tensorflow.keras.layers import Input
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras import backend as K
from keras.datasets import mnist
import matplotlib.pyplot as plt
import numpy as np

class ConvAutoencoder:
	@staticmethod
	def build(width, height, depth, filters=(32, 64), latentDim=16):
		# initialize the input shape to be "channels last" along with
		# the channels dimension itself
		# channels dimension itself
		inputShape = (height, width, depth)
		chanDim = -1

		# define the input to the encoder
		inputs = Input(shape=inputShape)
		x = inputs

		# loop over the number of filters
		for f in filters:
			# apply a CONV => RELU => BN operation
			x = Conv2D(f, (3, 3), strides=2, padding="same")(x)
			x = LeakyReLU(alpha=0.2)(x)
			x = BatchNormalization(axis=chanDim)(x)

		# flatten the network and then construct our latent vector
		volumeSize = K.int_shape(x)
		x = Flatten()(x)
		latent = Dense(latentDim)(x)

		# build the encoder model
		encoder = Model(inputs, latent, name="encoder")

		# start building the decoder model which will accept the
		# output of the encoder as its inputs
		latentInputs = Input(shape=(latentDim,))
		x = Dense(np.prod(volumeSize[1:]))(latentInputs)
		x = Reshape((volumeSize[1], volumeSize[2], volumeSize[3]))(x)

		# loop over our number of filters again, but this time in
		# reverse order
		for f in filters[::-1]:
			# apply a CONV_TRANSPOSE => RELU => BN operation
			x = Conv2DTranspose(f, (3, 3), strides=2,
				padding="same")(x)
			x = LeakyReLU(alpha=0.2)(x)
			x = BatchNormalization(axis=chanDim)(x)

		# apply a single CONV_TRANSPOSE layer used to recover the
		# original depth of the image
		x = Conv2DTranspose(depth, (3, 3), padding="same")(x)
		outputs = Activation("sigmoid")(x)

		# build the decoder model
		decoder = Model(latentInputs, outputs, name="decoder")

		# our autoencoder is the encoder + decoder
		autoencoder = Model(inputs, decoder(encoder(inputs)),
			name="autoencoder")

		# return a 3-tuple of the encoder, decoder, and autoencoder
		return (encoder, decoder, autoencoder)

# Load train and test dataset
def load_dataset():

	# load dataset
	(trainX, trainY), (testX, testY) = mnist.load_data()
 
	# reshape dataset to have a single channel
	trainX = trainX.reshape((trainX.shape[0], 28, 28, 1))
	testX = testX.reshape((testX.shape[0], 28, 28, 1))
 
	# one hot encode target values as the output has only 10 categories
	trainY = keras.utils.to_categorical(trainY)
	testY = keras.utils.to_categorical(testY)
 
	return trainX, trainY, testX, testY

# Scale pixels
def prep_pixels(train, test):

	# convert from integers to floats
	train_norm = train.astype('float32')
	test_norm = test.astype('float32')
 
	# normalize to range 0-1
	train_norm = train_norm / 255.0
	test_norm = test_norm / 255.0

	# return normalized images
	return train_norm, test_norm

# Add random noise to the data
def add_random_noise(train, test, noise_factor=0.25):

  trainNoise = train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=train.shape)
  testNoise = test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=test.shape)
  trainNoise = np.clip(trainNoise, 0, 1)
  testNoise = np.clip(testNoise, 0, 1)

  return trainNoise, testNoise

def evaluate_denoising_autoencoder(trainX, testX, trainXNoisy, testXNoisy):

    # construct our convolutional autoencoder
    print("[INFO] building autoencoder...")
    (encoder, decoder, autoencoder) = ConvAutoencoder.build(28, 28, 1)
    opt = Adam(lr=1e-3)
    autoencoder.compile(loss="mse", optimizer=opt)

    # train the convolutional autoencoder
    H = autoencoder.fit(trainXNoisy, trainX, validation_data=(testXNoisy, testX), epochs=EPOCHS, batch_size=BATCH_SIZE)

    # construct a plot that plots and saves the training history
    N = np.arange(0, EPOCHS)
    plt.style.use("ggplot")
    plt.figure()
    plt.plot(N, H.history["loss"], label="train_loss")
    plt.plot(N, H.history["val_loss"], label="val_loss")
    plt.title("Training Loss and Accuracy")
    plt.xlabel("Epoch #")
    plt.ylabel("Loss/Accuracy")
    plt.legend(loc="lower left")

    # use the convolutional autoencoder to make predictions on the
    # testing images, then initialize our list of output images
    #print("[INFO] making predictions...")
    #decoded = autoencoder.predict(testXNoisy)

# run the test harness for evaluating a model
def run_test_harness():

	# load dataset
	trainX, trainY, testX, testY = load_dataset()
 
	# prepare pixel data after feature engineering steps
	trainX, testX = prep_pixels(trainX, testX)
 
	# add random noise to image data
	trainXNoisy, testXNoisy = add_random_noise(trainX, testX, 0.4)

  # evaluate denoising model
	evaluate_denoising_autoencoder(trainX, testX, trainXNoisy, testXNoisy)

# entry point, run the test harness
run_test_harness()

